require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe GamesController do
  let(:valid_attributes) { { "home_team_id" => "1","away_team_id" => "2", "home_team_score" => "1", "away_team_score" => "12"    } }

  let(:valid_session) { {} }


  describe "GET new" do
    it "assigns a new game as @game" do
      get :new, {}, valid_session
      assigns(:game).should be_a_new(Game)
    end
  end

    describe "with invalid params" do
      it "assigns a newly created but unsaved game as @game" do
        # Trigger the behavior that occurs when invalid params are submitted
        Game.any_instance.stub(:save).and_return(false)
        post :create, {:game => { "home_team_id" => "invalid value" }}, valid_session
        assigns(:game).should be_a_new(Game)
      end
      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Game.any_instance.stub(:save).and_return(false)
        post :create, {:game => { "home_team_id" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
end
